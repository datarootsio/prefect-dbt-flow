{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":""},{"location":"#prefect-dbt-flow","title":"prefect-dbt-flow","text":"<p>prefect-dbt-flow is a Python library that enables Prefect to convert dbt workflows into independent tasks within a Prefect flow. This integration simplifies the orchestration and execution of dbt models and tests using Prefect, allowing you to build robust data pipelines and monitor your dbt projects efficiently.</p> <p>dbt is an immensely popular tool for building and testing data transformation models, and Prefect is a versatile workflow management system. This integration brings together the best of both worlds, empowering data engineers and analysts to create robust data pipelines.</p> <p>Key features:</p> <ul> <li>Simplified Orchestration: Define and manage your dbt projects and models as Prefect tasks, creating a seamless pipeline for data transformation.</li> <li>Monitoring and Error Handling: Gain deep insights into the execution of your dbt workflows and take immediate action in case of issues.</li> <li>Workflow Consistency: Ensure your dbt workflows run consistently by managing them through Prefect. This consistency is crucial for maintaining data quality and reliability.</li> <li>Advanced Configuration: Customize your dbt workflow by adjusting the dbt project, profile, and DAG options. You can also use Prefect features like scheduling, notifications, and task retries to monitor and manage your dbt flows effectively.</li> </ul> <p>To get started, check out our getting started guide.</p> <p>Active Development Notice: prefect-dbt-flow is actively under development and may not be ready for production use. We advise users to be aware of potential breaking changes as the library evolves. Please check the changelog for updates.</p>"},{"location":"#how-to-install","title":"How to Install","text":"<p>You can install prefect-dbt-flow via pip: <pre><code>pip install prefect-dbt-flow\n</code></pre></p> <p>Note: prefect-dbt-flow does not come with dbt as a dependency. You will need to install dbt or a dbt-adapter separately.</p>"},{"location":"#basic-usage","title":"Basic Usage","text":"<p>Here's an example of how to use prefect-dbt-flow to create a Prefect flow for your dbt project:</p> <pre><code>from prefect_dbt_flow import dbt_flow\nfrom prefect_dbt_flow.dbt import DbtProfile, DbtProject\n\nmy_flow = dbt_flow(\n    project=DbtProject(\n        name=\"jaffle_shop\",\n        project_dir=\"path_to/jaffle_shop\",\n        profiles_dir=\"path_to/jaffle_shop\",\n    ),\n    profile=DbtProfile(\n        target=\"dev\",\n        overrides={\n            \"type\": \"duckdb\",\n            \"path\": \"path_to/duckdb.db\",\n        },\n    ),\n)\n\nif __name__ == \"__main__\":\n    my_flow()\n</code></pre> <p></p> <p>For more information consult the docs</p>"},{"location":"#inspiration","title":"Inspiration","text":"<p>prefect-dbt-flow draws inspiration from various projects in the data engineering and workflow orchestration space, including: - astronomer-cosmos - dbt + Dagster - prefect-dataplatform - Anna Geller</p>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the MIT License. You are free to use, modify, and distribute this software as per the terms of the license. If you find this project helpful, please consider giving it a star on GitHub.</p>"},{"location":"dag_integration/","title":"DAG integration","text":"<p>You might want to integrate a <code>dbt_flow</code> with other flows or tasks. This page will show you how.</p>"},{"location":"dag_integration/#example","title":"Example","text":"<p>The following example shows how to integrate a <code>dbt_flow</code> with other flows or tasks.</p> <pre><code>from prefect import task, flow\n\nfrom prefect_dbt_flow import dbt_flow\n\nmy_dbt_flow = dbt_flow(\n    ...\n)\n\n@flow\ndef upstream_flow():\n    @task\n    def upstream_flow_task():\n        print(\"upstream flow\")\n\n    upstream_flow_task()\n\n\n@flow\ndef downstream_flow():\n    @task\n    def downstream_flow_task():\n        print(\"downstream flow\")\n\n    downstream_flow_task()\n\n\n@task\ndef upstream_task():\n    print(\"upstream task\")\n\n\n@task\ndef downstream_task():\n    print(\"downstream task\")\n\n\n@flow(log_prints=True)\ndef main_flow():\n    uf_future = upstream_flow(return_state=True)\n    ut_future = upstream_task(return_state=True)\n\n    dbt_future = my_dbt_flow(wait_for=[uf_future, ut_future])\n\n    downstream_flow(wait_for=[dbt_future])\n    downstream_task(wait_for=[dbt_future])\n\n\nif __name__ == \"__main__\":\n    main_flow()\n</code></pre> <p>The code above results in the following DAG. </p> <p>A full example can be found at <code>examples/sample_project/my_dbt_flow_other_deps_dev.py</code>.</p>"},{"location":"getting_started/","title":"Getting started","text":"<p>The prefect-dbt-flow library allows you to seamlessly integrate dbt workflows into Prefect. This getting started guide will walk you through the steps required to create and manage a Prefect flow for the jaffle_shop dbt project. After this guide, you should be able to create dbt flows for your own dbt projects.</p>"},{"location":"getting_started/#example-guide","title":"Example guide","text":"<p>This guide will walk you through setting up and running a sample prefect-dbt-flow using Docker Compose. Follow the steps to get started.</p> <p>Note: We use docker compose to simplify and \"bundle\" the setup for this guide. In a production environment, you will probably connect to Prefect cloud or a Prefect server setup by your infrastructure team.</p>"},{"location":"getting_started/#1-clone-this-repository","title":"1. Clone this repository","text":"<p>Clone the prefect-dbt-flow repository and navigate to the example directory. <pre><code>git clone https://github.com/datarootsio/prefect-dbt-flow.git\ncd prefect-dbt-flow/example/jaffle_shop\n</code></pre></p> <p>Note: Make sure all the following commands are run from the <code>prefect-dbt-flow/example/jaffle_shop</code> directory.</p>"},{"location":"getting_started/#2-install-docker-compose","title":"2. Install Docker Compose","text":"<p>Ensure that you have Docker Compose installed on your system. If you haven't already installed it, refer to the Docker Compose Installation Guide for instructions.</p>"},{"location":"getting_started/#3-start-the-docker-containers","title":"3. Start the Docker Containers","text":"<p>The following command will launch three services defined in the docker-compose file:</p> <ul> <li>A PostgreSQL database,</li> <li>A Prefect server accessible at: <code>http://0.0.0.0:4200/</code> or <code>http://localhost:4200/</code></li> <li>A cli environment with all the required components installed. This allows you to easily interact with the Prefect server and run Prefect flows.</li> </ul> <pre><code>docker compose up -d --build\n</code></pre>"},{"location":"getting_started/#4-access-the-cli-service","title":"4. Access the cli service","text":"<p>To access the cli service, use the following command: <pre><code>docker compose run cli\n</code></pre></p>"},{"location":"getting_started/#5-run-the-prefect-flow","title":"5. Run the Prefect flow","text":"<p>Inside the cli environment, run the Prefect dbt flow using the following command: <pre><code>python my_prefect_dbt_flow.py\n</code></pre> This command will execute the Prefect flow and print its status to the terminal.</p>"},{"location":"getting_started/#6-view-the-results","title":"6. View the results","text":"<p>To view the results and monitor the flow, follow these steps:</p> <ul> <li>Open a web browser and go to http://0.0.0.0:4200/.</li> <li>In the Prefect Server interface, click on the flow runs tab. There should be flow with a similar name to <code>energetic-collie</code>.</li> <li>From there, you can explore the dbt job DAG and its associated logs.</li> </ul> <p></p> <p>With these steps, you can set up and run a prefect-dbt-flow and monitor its progress through the Prefect Server interface.</p>"},{"location":"getting_started/#advanced-configuration","title":"Advanced Configuration","text":"<p>In the previous section, you configured your dbt project within the Prefect flow. Here's how you can customize the configuration further:</p>"},{"location":"getting_started/#dbt-project-configuration","title":"Dbt Project Configuration","text":"<p>You specified the name, project directory, and profiles directory when creating the DbtProject object. Adjust these values to match your dbt project's setup.</p> <ul> <li><code>DbtProject</code>: Represents your dbt project configuration.<ul> <li><code>name</code>: Name of the dbt project.</li> <li><code>project_dir</code>: Path to the directory containing the project.yml configuration file.</li> <li><code>profiles_dir</code>: Path to the directory containing the profiles.yml file.</li> </ul> </li> </ul>"},{"location":"getting_started/#dbt-profile-configuration","title":"Dbt Profile Configuration","text":"<p>The DbtProfile object allows you to set the target profile for your dbt project. This profile should match the configuration in your dbt profiles.yml file.</p> <ul> <li><code>DbtProfile</code>: Represents the dbt profile configuration.<ul> <li><code>target</code>: Specify the dbt target (e.g., \"dev\" or \"prod\").</li> </ul> </li> </ul>"},{"location":"getting_started/#dag-options","title":"Dag Options","text":"<p>The DbtDagOptions object lets you define various options for your dbt workflow. In the provided example, we set run_test_after_model to True, indicating that dbt tests should run after each dbt model.</p> <ul> <li><code>DbtDagOptions</code>: Allows you to specify dbt DAG configurations.<ul> <li><code>select</code>: Specify a dbt module to include in the run (select syntax).</li> <li><code>exclude</code>: Specify a dbt module to exclude in the run (exclude syntax).</li> <li><code>run_test_after_model</code>: Set this to True to run tests after running models.</li> </ul> </li> </ul>"},{"location":"getting_started/#prefect-flow-configuration","title":"Prefect flow configuration","text":"<p>prefect-dbt-flow integrates with Prefect's monitoring and error handling capabilities. You can use Prefect features like scheduling, notifications, and task retries to monitor and manage your dbt flows effectively. You can pass this additional Prefect flow configuration options using a dictionary into: <code>flow_kwargs</code>.</p> <p>For more information on these features, consult the Prefect documentation.</p>"},{"location":"getting_started/#conclusion","title":"Conclusion","text":"<p>prefect-dbt-flow simplifies the orchestration and management of dbt workflows within a Prefect flow. By following the steps in this guide, you can easily create and execute data pipelines that incorporate dbt projects. Be aware of breaking changes as this library is actively developed, and consult the changelog for updates. Happy data engineering! :rocket:</p>"},{"location":"how_it_works/","title":"How it works","text":"<p>Here, we briefly explain how prefect-dbt-flow works under the hood.</p> <ol> <li>Based on the configuration provided by the user, we look for the dbt project directory and using the <code>dbt ls</code> command (which returns a json structure) we try to parse all the \"dbt nodes\". The dbt nodes we are interested in are the model/tests/seed and snapshot nodes. The <code>dbt ls</code> command also provides us with the dbt DAG. Each node defines its upstream dependencies.</li> <li>For each dbt node we create a Prefect task, meaning that each Prefect tasks executes one single model/test/seed/snapshot.</li> <li>Based on the dbt node dependencies we set the dependencies between the Prefect tasks.</li> <li>Lastly we wrap all the Prefect tasks in a Prefect flow and return it to the user.</li> </ol> <p>If you want a more detailed explanation we would recommend you to read the source code of the source code.</p>"},{"location":"license/","title":"License","text":"<p>MIT License</p> <p>Copyright (c) 2023 dataroots</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"profile_overrides/","title":"Profile overrides","text":"<p>When using dbt, you might want to dynamically change the profile configuration based for example on the environment you are running in. Also some profile configurations might be sensitive and you might not want to store them in your repository. Profile overrides allow you to inject profile configurations via python code, at runtime. In this section we will show you how to use profile overrides.</p>"},{"location":"profile_overrides/#basic-usage","title":"Basic usage","text":"<p>To override a profile you must past the <code>DbtProfile</code> dataclass to the dbt_flow function.</p> <p>Profile overrides handle the following cases:</p> <ul> <li>When a <code>profile.yml</code> is detected in the configured <code>profiles_dir</code> it will read in the profile and override the values with the values in the <code>overrides</code> dict. The values that are not overridden will be kept as is.</li> <li>When no <code>profile.yml</code> is detected it will create a new <code>profile.yml</code> with the values in the <code>overrides</code> dict. In this case you need to provide all the values needed for your dbt adapter.</li> </ul>"},{"location":"profile_overrides/#example","title":"Example","text":"<p>Contents of <code>path_to/jaffle_shop/profile.yml</code> BEFORE override: <pre><code>example_jaffle_shop:\n  target: dev\n  outputs:\n    dev:\n      type: postgres\n      host: data-db\n      port: 5432\n      dbname: data\n</code></pre></p> <p>Configuring the profile overrides: <pre><code>import os\n\nfrom prefect import variables\nfrom prefect.blocks.system import Secret\n\npostgres_user = variables.get(\"POSTGRES_USER\")\npostgres_pw = Secret.load(\"POSTGRES_PASSWORD\").get()\n\nmy_flow = dbt_flow(\n    project=DbtProject(\n        ...,\n        profiles_dir=\"path_to/jaffle_shop\",\n    ),\n    profile=DbtProfile(\n        target=\"dev\",\n        overrides={\n            \"user\": postgres_user,\n            \"password\": postgres_pw,\n            \"schema\": os.environ[\"POSTGRES_SCHEMA\"],\n            \"connect_timeout\": 30,\n        },\n    ),\n)\n</code></pre></p> <p>Contents of <code>path_to/jaffle_shop/profile.yml</code> AFTER override: <pre><code>example_jaffle_shop:\n  target: dev\n  outputs:\n    dev:\n      type: postgres\n      host: data-db\n      port: 5432\n      dbname: data\n      user: admin\n      password: super-secret-password\n      schema: example\n      connect_timeout: 30\n</code></pre></p>"},{"location":"api/cli/","title":"dbt CLI","text":""},{"location":"api/cli/#prefect_dbt_flow.dbt.cli","title":"<code>prefect_dbt_flow.dbt.cli</code>","text":"<p>Utility functions for interacting with dbt using command-line commands.</p>"},{"location":"api/cli/#prefect_dbt_flow.dbt.cli.dbt_deps","title":"<code>dbt_deps(project, profile, dag_options)</code>","text":"<p>Function that executes <code>dbt deps</code> command</p> <p>Parameters:</p> Name Type Description Default <code>project</code> <code>DbtProject</code> <p>A class that represents a dbt project configuration.</p> required <code>profile</code> <code>Optional[DbtProfile]</code> <p>A class that represents a dbt profile configuration.</p> required <code>dag_options</code> <code>Optional[DbtDagOptions]</code> <p>A class to add dbt DAG configurations.</p> required <p>Returns:</p> Type Description <code>str</code> <p>A string representing the output of the <code>dbt deps</code> command</p> Source code in <code>prefect_dbt_flow/dbt/cli.py</code> <pre><code>def dbt_deps(\n    project: DbtProject,\n    profile: Optional[DbtProfile],\n    dag_options: Optional[DbtDagOptions],\n) -&gt; str:\n    \"\"\"\n    Function that executes `dbt deps` command\n\n    Args:\n        project: A class that represents a dbt project configuration.\n        profile: A class that represents a dbt profile configuration.\n        dag_options: A class to add dbt DAG configurations.\n\n    Returns:\n        A string representing the output of the `dbt deps` command\n    \"\"\"\n    dbt_deps_cmd = [DBT_EXE, \"deps\"]\n    dbt_deps_cmd.extend([\"--project-dir\", str(project.project_dir)])\n    dbt_deps_cmd.extend([\"--profiles-dir\", str(project.profiles_dir)])\n\n    if profile:\n        dbt_deps_cmd.extend([\"-t\", profile.target])\n\n    if dag_options:\n        if dag_options.vars:\n            dbt_deps_cmd.extend([\"--vars\", f\"'{json.dumps(dag_options.vars)}'\"])\n\n    return cmd.run(\" \".join(dbt_deps_cmd))\n</code></pre>"},{"location":"api/cli/#prefect_dbt_flow.dbt.cli.dbt_ls","title":"<code>dbt_ls(project, dag_options, profile, output='json')</code>","text":"<p>Code that lists resources from the dbt project, using <code>dbt ls</code> command.</p> <p>Parameters:</p> Name Type Description Default <code>project</code> <code>DbtProject</code> <p>A class that represents a dbt project configuration.</p> required <code>dag_options</code> <code>Optional[DbtDagOptions]</code> <p>A class to add dbt DAG configurations.</p> required <code>profile</code> <code>Optional[DbtProfile]</code> <p>A class that represents a dbt profile configuration.</p> required <code>output</code> <code>str</code> <p>Format of output, default is JSON.</p> <code>'json'</code> <p>Returns:</p> Type Description <code>str</code> <p>list of JSON objects containing dbt resources.</p> Source code in <code>prefect_dbt_flow/dbt/cli.py</code> <pre><code>def dbt_ls(\n    project: DbtProject,\n    dag_options: Optional[DbtDagOptions],\n    profile: Optional[DbtProfile],\n    output: str = \"json\",\n) -&gt; str:\n    \"\"\"\n    Code that lists resources from the dbt project, using `dbt ls` command.\n\n    Args:\n        project: A class that represents a dbt project configuration.\n        dag_options: A class to add dbt DAG configurations.\n        profile: A class that represents a dbt profile configuration.\n        output: Format of output, default is JSON.\n\n    Returns:\n        list of JSON objects containing dbt resources.\n    \"\"\"\n    dbt_ls_cmd = [DBT_EXE, \"ls\"]\n    dbt_ls_cmd.extend([\"--project-dir\", str(project.project_dir)])\n    dbt_ls_cmd.extend([\"--profiles-dir\", str(project.profiles_dir)])\n    dbt_ls_cmd.extend([\"--output\", output])\n\n    if profile:\n        dbt_ls_cmd.extend([\"-t\", profile.target])\n\n    if dag_options:\n        if dag_options.select:\n            dbt_ls_cmd.extend([\"--select\", dag_options.select])\n        if dag_options.exclude:\n            dbt_ls_cmd.extend([\"--exclude\", dag_options.exclude])\n        if dag_options.vars:\n            dbt_ls_cmd.extend([\"--vars\", f\"'{json.dumps(dag_options.vars)}'\"])\n\n    return cmd.run(\" \".join(dbt_ls_cmd))\n</code></pre>"},{"location":"api/cli/#prefect_dbt_flow.dbt.cli.dbt_run","title":"<code>dbt_run(project, model, profile, dag_options)</code>","text":"<p>Function that executes <code>dbt run</code> command</p> <p>Parameters:</p> Name Type Description Default <code>project</code> <code>DbtProject</code> <p>A class that represents a dbt project configuration.</p> required <code>model</code> <code>str</code> <p>Name of the model to run.</p> required <code>profile</code> <code>Optional[DbtProfile]</code> <p>A class that represents a dbt profile configuration.</p> required <code>dag_options</code> <code>Optional[DbtDagOptions]</code> <p>A class to add dbt DAG configurations.</p> required <p>Returns:</p> Type Description <code>str</code> <p>A string representing the output of the <code>dbt run</code> command.</p> Source code in <code>prefect_dbt_flow/dbt/cli.py</code> <pre><code>def dbt_run(\n    project: DbtProject,\n    model: str,\n    profile: Optional[DbtProfile],\n    dag_options: Optional[DbtDagOptions],\n) -&gt; str:\n    \"\"\"\n    Function that executes `dbt run` command\n\n    Args:\n        project: A class that represents a dbt project configuration.\n        model: Name of the model to run.\n        profile: A class that represents a dbt profile configuration.\n        dag_options: A class to add dbt DAG configurations.\n\n    Returns:\n        A string representing the output of the `dbt run` command.\n    \"\"\"\n    dbt_run_cmd = [DBT_EXE, \"run\"]\n    dbt_run_cmd.extend([\"--project-dir\", str(project.project_dir)])\n    dbt_run_cmd.extend([\"--profiles-dir\", str(project.profiles_dir)])\n    dbt_run_cmd.extend([\"-m\", model])\n\n    if profile:\n        dbt_run_cmd.extend([\"-t\", profile.target])\n\n    if dag_options:\n        if dag_options.vars:\n            dbt_run_cmd.extend([\"--vars\", f\"'{json.dumps(dag_options.vars)}'\"])\n\n    return cmd.run(\" \".join(dbt_run_cmd))\n</code></pre>"},{"location":"api/cli/#prefect_dbt_flow.dbt.cli.dbt_seed","title":"<code>dbt_seed(project, seed, profile, dag_options)</code>","text":"<p>Function that executes <code>dbt seed</code> command</p> <p>Parameters:</p> Name Type Description Default <code>project</code> <code>DbtProject</code> <p>A class that represents a dbt project configuration.</p> required <code>seed</code> <code>str</code> <p>Name of the seed to run.</p> required <code>profile</code> <code>Optional[DbtProfile]</code> <p>A class that represents a dbt profile configuration.</p> required <code>dag_options</code> <code>Optional[DbtDagOptions]</code> <p>A class to add dbt DAG configurations.</p> required <p>Returns:</p> Type Description <code>str</code> <p>A string representing the output of the <code>dbt seed</code> command</p> Source code in <code>prefect_dbt_flow/dbt/cli.py</code> <pre><code>def dbt_seed(\n    project: DbtProject,\n    seed: str,\n    profile: Optional[DbtProfile],\n    dag_options: Optional[DbtDagOptions],\n) -&gt; str:\n    \"\"\"\n    Function that executes `dbt seed` command\n\n    Args:\n        project: A class that represents a dbt project configuration.\n        seed: Name of the seed to run.\n        profile: A class that represents a dbt profile configuration.\n        dag_options: A class to add dbt DAG configurations.\n\n    Returns:\n        A string representing the output of the `dbt seed` command\n    \"\"\"\n    dbt_seed_cmd = [DBT_EXE, \"seed\"]\n    dbt_seed_cmd.extend([\"--project-dir\", str(project.project_dir)])\n    dbt_seed_cmd.extend([\"--profiles-dir\", str(project.profiles_dir)])\n    dbt_seed_cmd.extend([\"--select\", seed])\n\n    if profile:\n        dbt_seed_cmd.extend([\"-t\", profile.target])\n\n    if dag_options:\n        if dag_options.vars:\n            dbt_seed_cmd.extend([\"--vars\", f\"'{json.dumps(dag_options.vars)}'\"])\n\n    return cmd.run(\" \".join(dbt_seed_cmd))\n</code></pre>"},{"location":"api/cli/#prefect_dbt_flow.dbt.cli.dbt_snapshot","title":"<code>dbt_snapshot(project, snapshot, profile, dag_options)</code>","text":"<p>Function that executes <code>dbt snapshot</code> command</p> <p>Parameters:</p> Name Type Description Default <code>project</code> <code>DbtProject</code> <p>A class that represents a dbt project configuration.</p> required <code>snapshot</code> <code>str</code> <p>Name of the snapshot to run.</p> required <code>profile</code> <code>Optional[DbtProfile]</code> <p>A class that represents a dbt profile configuration.</p> required <code>dag_options</code> <code>Optional[DbtDagOptions]</code> <p>A class to add dbt DAG configurations.</p> required <p>Returns:</p> Type Description <code>str</code> <p>A string representing the output of the <code>dbt snapshot</code> command</p> Source code in <code>prefect_dbt_flow/dbt/cli.py</code> <pre><code>def dbt_snapshot(\n    project: DbtProject,\n    snapshot: str,\n    profile: Optional[DbtProfile],\n    dag_options: Optional[DbtDagOptions],\n) -&gt; str:\n    \"\"\"\n    Function that executes `dbt snapshot` command\n\n    Args:\n        project: A class that represents a dbt project configuration.\n        snapshot: Name of the snapshot to run.\n        profile: A class that represents a dbt profile configuration.\n        dag_options: A class to add dbt DAG configurations.\n\n    Returns:\n        A string representing the output of the `dbt snapshot` command\n    \"\"\"\n    dbt_snapshot_cmd = [DBT_EXE, \"snapshot\"]\n    dbt_snapshot_cmd.extend([\"--project-dir\", str(project.project_dir)])\n    dbt_snapshot_cmd.extend([\"--profiles-dir\", str(project.profiles_dir)])\n    dbt_snapshot_cmd.extend([\"--select\", snapshot])\n\n    if profile:\n        dbt_snapshot_cmd.extend([\"-t\", profile.target])\n\n    if dag_options:\n        if dag_options.vars:\n            dbt_snapshot_cmd.extend([\"--vars\", f\"'{json.dumps(dag_options.vars)}'\"])\n\n    return cmd.run(\" \".join(dbt_snapshot_cmd))\n</code></pre>"},{"location":"api/cli/#prefect_dbt_flow.dbt.cli.dbt_test","title":"<code>dbt_test(project, model, profile, dag_options)</code>","text":"<p>Function that executes <code>dbt test</code> command</p> <p>Parameters:</p> Name Type Description Default <code>project</code> <code>DbtProject</code> <p>A class that represents a dbt project configuration.</p> required <code>model</code> <code>str</code> <p>Name of the model to run.</p> required <code>profile</code> <code>Optional[DbtProfile]</code> <p>A class that represents a dbt profile configuration.</p> required <code>dag_options</code> <code>Optional[DbtDagOptions]</code> <p>A class to add dbt DAG configurations.</p> required <p>Returns:</p> Type Description <code>str</code> <p>A string representing the output of the <code>dbt test</code> command.</p> Source code in <code>prefect_dbt_flow/dbt/cli.py</code> <pre><code>def dbt_test(\n    project: DbtProject,\n    model: str,\n    profile: Optional[DbtProfile],\n    dag_options: Optional[DbtDagOptions],\n) -&gt; str:\n    \"\"\"\n    Function that executes `dbt test` command\n\n    Args:\n        project: A class that represents a dbt project configuration.\n        model: Name of the model to run.\n        profile: A class that represents a dbt profile configuration.\n        dag_options: A class to add dbt DAG configurations.\n\n    Returns:\n        A string representing the output of the `dbt test` command.\n    \"\"\"\n    dbt_test_cmd = [DBT_EXE, \"test\"]\n    dbt_test_cmd.extend([\"--project-dir\", str(project.project_dir)])\n    dbt_test_cmd.extend([\"--profiles-dir\", str(project.profiles_dir)])\n    dbt_test_cmd.extend([\"-m\", model])\n\n    if profile:\n        dbt_test_cmd.extend([\"-t\", profile.target])\n\n    if dag_options:\n        if dag_options.vars:\n            dbt_test_cmd.extend([\"--vars\", f\"'{json.dumps(dag_options.vars)}'\"])\n\n    return cmd.run(\" \".join(dbt_test_cmd))\n</code></pre>"},{"location":"api/flow/","title":"dbt Flow","text":""},{"location":"api/flow/#prefect_dbt_flow.flow","title":"<code>prefect_dbt_flow.flow</code>","text":"<p>Functions to create a prefect flow for a dbt project.</p>"},{"location":"api/flow/#prefect_dbt_flow.flow.dbt_flow","title":"<code>dbt_flow(project, profile=None, dag_options=None, flow_kwargs=None)</code>","text":"<p>Create a PrefectFlow for executing a dbt project.</p> <p>Parameters:</p> Name Type Description Default <code>project</code> <code>DbtProject</code> <p>A Class that represents a dbt project configuration.</p> required <code>profile</code> <code>Optional[DbtProfile]</code> <p>A Class that represents a dbt profile configuration.</p> <code>None</code> <code>dag_options</code> <code>Optional[DbtDagOptions]</code> <p>A Class to add dbt DAG configurations.</p> <code>None</code> <code>flow_kwargs</code> <code>Optional[dict]</code> <p>A dict of prefect @flow arguments</p> <code>None</code> <p>Returns:</p> Name Type Description <code>dbt_flow</code> <code>Flow</code> <p>A Prefec Flow.</p> Source code in <code>prefect_dbt_flow/flow.py</code> <pre><code>def dbt_flow(\n    project: DbtProject,\n    profile: Optional[DbtProfile] = None,\n    dag_options: Optional[DbtDagOptions] = None,\n    flow_kwargs: Optional[dict] = None,\n) -&gt; Flow:\n    \"\"\"\n    Create a PrefectFlow for executing a dbt project.\n\n    Args:\n        project: A Class that represents a dbt project configuration.\n        profile: A Class that represents a dbt profile configuration.\n        dag_options: A Class to add dbt DAG configurations.\n        flow_kwargs: A dict of prefect @flow arguments\n\n    Returns:\n        dbt_flow: A Prefec Flow.\n    \"\"\"\n    all_flow_kwargs = {\n        \"name\": project.name,\n        **(flow_kwargs or {}),\n    }\n\n    dbt_graph = graph.parse_dbt_project(project, profile, dag_options)\n\n    @flow(**all_flow_kwargs)\n    def dbt_flow():\n        \"\"\"\n        Function that configurates and runs a Prefect flow.\n\n        Returns:\n            A prefect flow\n        \"\"\"\n        tasks.generate_tasks_dag(\n            project,\n            profile,\n            dag_options,\n            dbt_graph,\n            dag_options.run_test_after_model if dag_options else False,\n        )\n\n    return dbt_flow\n</code></pre>"},{"location":"api/graph/","title":"dbt Graph","text":""},{"location":"api/graph/#prefect_dbt_flow.dbt.graph","title":"<code>prefect_dbt_flow.dbt.graph</code>","text":"<p>Code for parsing dbt project and generate a list of dbt nodes</p>"},{"location":"api/graph/#prefect_dbt_flow.dbt.graph.parse_dbt_project","title":"<code>parse_dbt_project(project, profile, dag_options=None)</code>","text":"<p>Parses a list of dbt nodes class objects from dbt ls cli command.</p> <p>Parameters:</p> Name Type Description Default <code>project</code> <code>DbtProject</code> <p>A class that represents a dbt project configuration.</p> required <code>profile</code> <code>Optional[DbtProfile]</code> <p>A class that represents a dbt profile configuration.</p> required <code>dag_options</code> <code>Optional[DbtDagOptions]</code> <p>A class to add dbt DAG configurations.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>dbt_graph</code> <code>List[DbtNode]</code> <p>A list of dbt nodes, each node as a dataclass.</p> Source code in <code>prefect_dbt_flow/dbt/graph.py</code> <pre><code>def parse_dbt_project(\n    project: DbtProject,\n    profile: Optional[DbtProfile],\n    dag_options: Optional[DbtDagOptions] = None,\n) -&gt; List[DbtNode]:\n    \"\"\"\n    Parses a list of dbt nodes class objects from dbt ls cli command.\n\n    Args:\n        project: A class that represents a dbt project configuration.\n        profile: A class that represents a dbt profile configuration.\n        dag_options: A class to add dbt DAG configurations.\n\n    Returns:\n        dbt_graph: A list of dbt nodes, each node as a dataclass.\n    \"\"\"\n    dbt_graph: List[DbtNode] = []\n    models_with_tests: List[str] = []\n\n    with override_profile(project, profile) as _project:\n        if not dag_options or dag_options.install_deps:\n            cli.dbt_deps(_project, profile, dag_options)\n\n        dbt_ls_output = cli.dbt_ls(_project, dag_options, profile)\n\n    for line in dbt_ls_output.split(\"\\n\"):\n        try:\n            node_dict = json.loads(line.strip())\n\n            if node_dict[\"resource_type\"] == \"model\":\n                dbt_graph.append(\n                    DbtNode(\n                        name=node_dict[\"name\"],\n                        unique_id=node_dict[\"unique_id\"],\n                        resource_type=DbtResourceType.MODEL,\n                        depends_on=node_dict[\"depends_on\"].get(\"nodes\", []),\n                    )\n                )\n\n            if node_dict[\"resource_type\"] == \"test\":\n                models_with_tests.extend(node_dict[\"depends_on\"][\"nodes\"])\n\n            if node_dict[\"resource_type\"] == \"seed\":\n                dbt_graph.append(\n                    DbtNode(\n                        name=node_dict[\"name\"],\n                        unique_id=node_dict[\"unique_id\"],\n                        resource_type=DbtResourceType.SEED,\n                        depends_on=node_dict[\"depends_on\"].get(\"nodes\", []),\n                    )\n                )\n\n            if node_dict[\"resource_type\"] == \"snapshot\":\n                dbt_graph.append(\n                    DbtNode(\n                        name=node_dict[\"name\"],\n                        unique_id=node_dict[\"unique_id\"],\n                        resource_type=DbtResourceType.SNAPSHOT,\n                        depends_on=node_dict[\"depends_on\"].get(\"nodes\", []),\n                    )\n                )\n\n        except json.decoder.JSONDecodeError:\n            pass\n\n    # Check if a node has tests\n    for dbt_node in dbt_graph:\n        if dbt_node.unique_id in models_with_tests:\n            dbt_node.has_tests = True\n\n    # Remove dependencies if not in Graph (needed in case of select/exclude)\n    all_model_ids = [dbt_node.unique_id for dbt_node in dbt_graph]\n    for dbt_node in dbt_graph:\n        dbt_node.depends_on = [\n            node_id for node_id in dbt_node.depends_on if node_id in all_model_ids\n        ]\n\n    return dbt_graph\n</code></pre>"},{"location":"api/models/","title":"dbt Models","text":""},{"location":"api/models/#prefect_dbt_flow.dbt","title":"<code>prefect_dbt_flow.dbt</code>","text":"<p>Code for managing and configuring a dbt project.</p>"},{"location":"api/models/#prefect_dbt_flow.dbt.DbtDagOptions","title":"<code>DbtDagOptions</code>  <code>dataclass</code>","text":"<p>Class to add dbt DAG configurations.</p> <p>Parameters:</p> Name Type Description Default <code>select</code> <code>Optional[str]</code> <p>dbt module to include in the run</p> <code>None</code> <code>exclude</code> <code>Optional[str]</code> <p>dbt module to exclude in the run</p> <code>None</code> <code>run_test_after_model</code> <code>bool</code> <p>run test afeter run model</p> <code>False</code> <code>vars</code> <code>Optional[dict[str, str]]</code> <p>dbt vars</p> <code>None</code> <code>install_deps</code> <code>bool</code> <p>install dbt dependencies, default behavior install deps</p> <code>True</code> Source code in <code>prefect_dbt_flow/dbt/__init__.py</code> <pre><code>@dataclass\nclass DbtDagOptions:\n    \"\"\"\n    Class to add dbt DAG configurations.\n\n    Args:\n        select: dbt module to include in the run\n        exclude: dbt module to exclude in the run\n        run_test_after_model: run test afeter run model\n        vars: dbt vars\n        install_deps: install dbt dependencies, default behavior install deps\n    \"\"\"\n\n    select: Optional[str] = None\n    exclude: Optional[str] = None\n    run_test_after_model: bool = False\n    vars: Optional[dict[str, str]] = None\n    install_deps: bool = True\n</code></pre>"},{"location":"api/models/#prefect_dbt_flow.dbt.DbtNode","title":"<code>DbtNode</code>  <code>dataclass</code>","text":"<p>Class that represents a dbt node in the project.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>dbt node name, e. my_model_a</p> required <code>unique_id</code> <code>str</code> <p>dbt id e. model.sample_project.my_model_a</p> required <code>resource_type</code> <code>DbtResourceType</code> <p>dbt resource type, e. model or seed</p> required <code>depends_on</code> <code>List[str]</code> <p>e. [\"model.sample_project.my_model_b\"]</p> required <code>has_tests</code> <code>bool</code> <p>if node is a test</p> <code>False</code> Source code in <code>prefect_dbt_flow/dbt/__init__.py</code> <pre><code>@dataclass\nclass DbtNode:\n    \"\"\"\n    Class that represents a dbt node in the project.\n\n    Args:\n        name: dbt node name, e. my_model_a\n        unique_id: dbt id e. model.sample_project.my_model_a\n        resource_type: dbt resource type, e. model or seed\n        depends_on: e. [\"model.sample_project.my_model_b\"]\n        has_tests: if node is a test\n    \"\"\"\n\n    name: str\n    unique_id: str\n    resource_type: DbtResourceType\n    depends_on: List[str]\n    has_tests: bool = False\n</code></pre>"},{"location":"api/models/#prefect_dbt_flow.dbt.DbtProfile","title":"<code>DbtProfile</code>  <code>dataclass</code>","text":"<p>Class that represents a dbt profile configuration.</p> <p>Parameters:</p> Name Type Description Default <code>target</code> <code>str</code> <p>dbt target, usualy \"dev\" or \"prod\"</p> required <code>overrides</code> <code>Optional[dict[str, str]]</code> <p>dbt profile overrides</p> <code>None</code> Source code in <code>prefect_dbt_flow/dbt/__init__.py</code> <pre><code>@dataclass\nclass DbtProfile:\n    \"\"\"\n    Class that represents a dbt profile configuration.\n\n    Args:\n        target: dbt target, usualy \"dev\" or \"prod\"\n        overrides: dbt profile overrides\n    \"\"\"\n\n    target: str\n    overrides: Optional[dict[str, str]] = None\n</code></pre>"},{"location":"api/models/#prefect_dbt_flow.dbt.DbtProject","title":"<code>DbtProject</code>  <code>dataclass</code>","text":"<p>Class that represents a dbt project configuration.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of dbt project,</p> required <code>project_dir</code> <code>Union[str, Path]</code> <p>Path to directory that contains dbt project.yml</p> required <code>profiles_dir</code> <code>Union[str, Path]</code> <p>Path to directory that contains dbt profiles.yml</p> required Source code in <code>prefect_dbt_flow/dbt/__init__.py</code> <pre><code>@dataclass\nclass DbtProject:\n    \"\"\"\n    Class that represents a dbt project configuration.\n\n    Args:\n        name: Name of dbt project,\n        project_dir: Path to directory that contains dbt project.yml\n        profiles_dir: Path to directory that contains dbt profiles.yml\n    \"\"\"\n\n    name: str\n    project_dir: Union[str, Path]\n    profiles_dir: Union[str, Path]\n</code></pre>"},{"location":"api/models/#prefect_dbt_flow.dbt.DbtResourceType","title":"<code>DbtResourceType</code>","text":"<p>             Bases: <code>Enum</code></p> <p>Enum class that represents a dbt resource type.</p> Source code in <code>prefect_dbt_flow/dbt/__init__.py</code> <pre><code>class DbtResourceType(Enum):\n    \"\"\"\n    Enum class that represents a dbt resource type.\n    \"\"\"\n\n    MODEL = auto()\n    SEED = auto()\n    SNAPSHOT = auto()\n</code></pre>"},{"location":"api/tasks/","title":"dbt Tasks","text":""},{"location":"api/tasks/#prefect_dbt_flow.dbt.tasks","title":"<code>prefect_dbt_flow.dbt.tasks</code>","text":"<p>Code for generate prefect DAG, includes dbt run and test functions</p>"},{"location":"api/tasks/#prefect_dbt_flow.dbt.tasks.generate_tasks_dag","title":"<code>generate_tasks_dag(project, profile, dag_options, dbt_graph, run_test_after_model=False)</code>","text":"<p>Generate a Prefect DAG for running and testing dbt models.</p> <p>Parameters:</p> Name Type Description Default <code>project</code> <code>DbtProject</code> <p>A class that represents a dbt project configuration.</p> required <code>profile</code> <code>Optional[DbtProfile]</code> <p>A class that represents a dbt profile configuration.</p> required <code>dag_options</code> <code>Optional[DbtDagOptions]</code> <p>A class to add dbt DAG configurations.</p> required <code>dbt_graph</code> <code>List[DbtNode]</code> <p>A list of dbt nodes (models) to include in the DAG.</p> required <code>run_test_after_model</code> <code>bool</code> <p>If True, run tests after running each model.</p> <code>False</code> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>prefect_dbt_flow/dbt/tasks.py</code> <pre><code>def generate_tasks_dag(\n    project: DbtProject,\n    profile: Optional[DbtProfile],\n    dag_options: Optional[DbtDagOptions],\n    dbt_graph: List[DbtNode],\n    run_test_after_model: bool = False,\n) -&gt; None:\n    \"\"\"\n    Generate a Prefect DAG for running and testing dbt models.\n\n    Args:\n        project: A class that represents a dbt project configuration.\n        profile: A class that represents a dbt profile configuration.\n        dag_options: A class to add dbt DAG configurations.\n        dbt_graph: A list of dbt nodes (models) to include in the DAG.\n        run_test_after_model: If True, run tests after running each model.\n\n    Returns:\n        None\n    \"\"\"\n\n    # TODO: refactor this\n    all_tasks = {\n        dbt_node.unique_id: RESOURCE_TYPE_TO_TASK[dbt_node.resource_type](\n            project=project,\n            profile=profile,\n            dag_options=dag_options,\n            dbt_node=dbt_node,\n        )\n        for dbt_node in dbt_graph\n    }\n\n    submitted_tasks: Dict[str, PrefectFuture] = {}\n    while node := _get_next_node(dbt_graph, list(submitted_tasks.keys())):\n        run_task = all_tasks[node.unique_id]\n        task_dependencies = [\n            submitted_tasks[node_unique_id] for node_unique_id in node.depends_on\n        ]\n\n        run_task_future = run_task.submit(wait_for=task_dependencies)\n\n        if run_test_after_model and node.has_tests:\n            test_task = _task_dbt_test(\n                project=project,\n                profile=profile,\n                dag_options=dag_options,\n                dbt_node=node,\n            )\n            test_task_future = test_task.submit(wait_for=run_task_future)\n\n            submitted_tasks[node.unique_id] = test_task_future\n        else:\n            submitted_tasks[node.unique_id] = run_task_future\n</code></pre>"},{"location":"coverage/","title":"Coverage","text":""}]}